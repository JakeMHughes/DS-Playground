[
  { "name": "extVar", "value": "extVar()", "packageName": "std"},
  { "name": "thisFile", "value": "thisFile()", "packageName": "std"},
  { "name": "type", "value": "type()", "packageName": "std"},
  { "name": "length", "value": "length()", "packageName": "std"},
  { "name": "objectHas", "value": "objectHas()", "packageName": "std"},
  { "name": "objectFields", "value": "objectFields()", "packageName": "std"},
  { "name": "objectHasAll", "value": "objctHasAll()", "packageName": "std"},
  { "name": "objectFieldsAll", "value": "objectFieldAll()", "packageName": "std"},
  { "name": "prune", "value": "prune()", "packageName": "std"},
  { "name": "mapWithKey", "value": "mapWithKey()", "packageName": "std"},
  { "name": "abs", "value": "abs()", "packageName": "std"},
  { "name": "sign", "value": "sign()", "packageName": "std"},
  { "name": "max", "value": "max()", "packageName": "std"},
  { "name": "min", "value": "min()", "packageName": "std"},
  { "name": "pow", "value": "pow()", "packageName": "std"},
  { "name": "exp", "value": "exp()", "packageName": "std"},
  { "name": "log", "value": "log()", "packageName": "std"},
  { "name": "exponent", "value": "exponent()", "packageName": "std"},
  { "name": "mantissa", "value": "mantissa()", "packageName": "std"},
  { "name": "floor", "value": "floor()", "packageName": "std"},
  { "name": "ceil", "value": "ceil()", "packageName": "std"},
  { "name": "sqrt", "value": "sqrt()", "packageName": "std"},
  { "name": "sin", "value": "sin()", "packageName": "std"},
  { "name": "cos", "value": "cos()", "packageName": "std"},
  { "name": "tan", "value": "tan()", "packageName": "std"},
  { "name": "asin", "value": "asin()", "packageName": "std"},
  { "name": "acos", "value": "acos()", "packageName": "std"},
  { "name": "atan", "value": "atan()", "packageName": "std"},
  { "name": "clamp", "value": "clamp()", "packageName": "std"},
  { "name": "assertEquals", "value": "assertEquals()", "packageName": "std"},
  { "name": "toString", "value": "toString()", "packageName": "std"},
  { "name": "codepoint", "value": "codepoint()", "packageName": "std"},
  { "name": "char", "value": "char()", "packageName": "std"},
  { "name": "substr", "value": "substr()", "packageName": "std"},
  { "name": "findsubstr", "value": "findsubstr()", "packageName": "std"},
  { "name": "startsWith", "value": "startsWith()", "packageName": "std"},
  { "name": "endsWith", "value": "endsWith()", "packageName": "std"},
  { "name": "stripChars", "value": "stripChars()", "packageName": "std"},
  { "name": "lstripChars", "value": "lstripChars()", "packageName": "std"},
  { "name": "rstripChars", "value": "rstripChars()", "packageName": "std"},
  { "name": "split", "value": "split()", "packageName": "std"},
  { "name": "splitLimit", "value": "splitLimit()", "packageName": "std"},
  { "name": "strReplace", "value": "strReplace()", "packageName": "std"},
  { "name": "asciiUpper", "value": "asciiUpper()", "packageName": "std"},
  { "name": "asciiLower", "value": "asciiLower()", "packageName": "std"},
  { "name": "stringChars", "value": "stringChars()", "packageName": "std"},
  { "name": "format", "value": "format()", "packageName": "std"},
  { "name": "escapeStringBash", "value": "escapeStringBash()", "packageName": "std"},
  { "name": "escapeStringDollars", "value": "escapeStringDollars()", "packageName": "std"},
  { "name": "escapeStringJson", "value": "escapeStringJson()", "packageName": "std"},
  { "name": "parseInt", "value": "parseInt()", "packageName": "std"},
  { "name": "parseOctal", "value": "parseOctal()", "packageName": "std"},
  { "name": "parseHex", "value": "ParseHex()", "packageName": "std"},
  { "name": "parseJson", "value": "parseJson()", "packageName": "std"},
  { "name": "encodeUTF8", "value": "encodeUTF8()", "packageName": "std"},
  { "name": "decodeUTF8", "value": "decodeUTF8()", "packageName": "std"},
  { "name": "minfestIni", "value": "manifestIni()", "packageName": "std"},
  { "name": "minfestPython", "value": "manifestPython()", "packageName": "std"},
  { "name": "minfestPythonVars", "value": "manifestPythonVars()", "packageName": "std"},
  { "name": "minfestJsonEx", "value": "manifestJsonEx()", "packageName": "std"},
  { "name": "minfestYamlDoc", "value": "manifestYamlDoc()", "packageName": "std"},
  { "name": "minfestYamlStream", "value": "manifestYamlStream()", "packageName": "std"},
  { "name": "minfestXmlJsonml", "value": "manifestXmlJsonml()", "packageName": "std"},
  { "name": "makeArray", "value": "makeArray()", "packageName": "std"},
  { "name": "member", "value": "member()", "packageName": "std"},
  { "name": "count", "value": "count()", "packageName": "std"},
  { "name": "find", "value": "find()", "packageName": "std"},
  { "name": "map", "value": "map()", "packageName": "std"},
  { "name": "mapWithIndex", "value": "mapWithIndex()", "packageName": "std"},
  { "name": "filterMap", "value": "filterMap()", "packageName": "std"},
  { "name": "flatMap", "value": "flatMap()", "packageName": "std"},
  { "name": "filter", "value": "filter()", "packageName": "std"},
  { "name": "foldl", "value": "foldl()", "packageName": "std"},
  { "name": "foldr", "value": "foldr()", "packageName": "std"},
  { "name": "range", "value": "range()", "packageName": "std"},
  { "name": "repeat", "value": "repeat()", "packageName": "std"},
  { "name": "join", "value": "join()", "packageName": "std"},
  { "name": "lines", "value": "lines()", "packageName": "std"},
  { "name": "flattenArrays", "value": "flattenArrays()", "packageName": "std"},
  { "name": "reverse", "value": "reverse()", "packageName": "std"},
  { "name": "sort", "value": "sort()", "packageName": "std"},
  { "name": "uniq", "value": "uniq()", "packageName": "std"},
  { "name": "set", "value": "set()", "packageName": "std"},
  { "name": "setInter", "value": "setInter()", "packageName": "std"},
  { "name": "setUnion", "value": "setUnion()", "packageName": "std"},
  { "name": "setDiff", "value": "setDiff()", "packageName": "std"},
  { "name": "setMember", "value": "setMember()", "packageName": "std"},
  { "name": "base64", "value": "base64()", "packageName": "std"},
  { "name": "bade64DecodeBytes", "value": "bade64DecodeBytes()", "packageName": "std"},
  { "name": "bade64Decode", "value": "bade64Decode()", "packageName": "std"},
  { "name": "md5", "value": "md5()", "packageName": "std"},
  { "name": "mergePatch", "value": "mergePatch()", "packageName": "std"},
  { "name": "trace", "value": "trace()", "packageName": "std"},






















  { "name": "hash", "value": "hash()", "packageName": "DS.Crypto"},
  { "name": "hmac", "value": "hmac()", "packageName": "DS.Crypto"},
  { "name": "encrypt", "value": "encrypt()", "packageName": "DS.Crypto"},
  { "name": "decrypt", "value": "decrypt()", "packageName": "DS.Crypto"},
  { "name": "now", "value": "now()", "packageName": "DS.ZonedDateTime"},
  { "name": "offset", "value": "offset()", "packageName": "DS.ZonedDateTime"},
  { "name": "format", "value": "compare()", "packageName": "DS.ZonedDateTime"},
  { "name": "compare", "value": "changeTimeZone()", "packageName": "DS.ZonedDateTime"},
  { "name": "changeTimeZone", "value": "now()", "packageName": "DS.ZonedDateTime"},
  { "name": "toLocalDate", "value": "toLocalDate()", "packageName": "DS.ZonedDateTime"},
  { "name": "toLocalTime", "value": "toLocalTime()", "packageName": "DS.ZonedDateTime"},
  { "name": "now", "value": "now()", "packageName": "DS.LocalDateTime"},
  { "name": "offset", "value": "offset()", "packageName": "DS.LocalDateTime"},
  { "name": "format", "value": "compare()", "packageName": "DS.LocalDateTime"},
  { "name": "compare", "value": "changeTimeZone()", "packageName": "DS.LocalDateTime"},
  { "name": "select", "value": "select()", "packageName": "DS.JsonPath"},
  { "name": "select", "value": "select()", "packageName": "DS.Util"},
  { "name": "filterEx", "value": "filterEx()", "packageName": "DS.Util"},
  { "name": "groupBy", "value": "groupBy()", "packageName": "DS.Util"},
  { "name": "remove", "value": "remove()", "packageName": "DS.Util"},
  { "name": "removeAll", "value": "removeAll()", "packageName": "DS.Util"},
  { "name": "deepFlattenArrays", "value": "deepFlattenArrays()", "packageName": "DS.Util"},
  { "name": "reverse", "value": "reverse()", "packageName": "DS.Util"},
  { "name": "parseDouble", "value": "parseDouble()", "packageName": "DS.Util"},
  { "name": "duplicates", "value": "duplicates()", "packageName": "DS.Util"},
  { "name": "sum", "value": "sum()", "packageName": "DS.Util"},
  { "name": "round", "value": "round()", "packageName": "DS.Util"},
  { "name": "counts", "value": "counts()", "packageName": "DS.Util"},
  { "name": "mapToObject", "value": "mapToObject()", "packageName": "DS.Util"},
  { "name": "regexFullMatch", "value": "regexFullMatch()", "packageName": "DS.Regex"},
  { "name": "regexPartialMatch", "value": "regexPartialMatch()", "packageName": "DS.Regex"},
  { "name": "regexScan", "value": "regexScan()", "packageName": "DS.Regex"},
  { "name": "regexQuoteMeta", "value": "regexQuoteMeta()", "packageName": "DS.Regex"},
  { "name": "regexReplace", "value": "regexReplace()", "packageName": "DS.Regex"},
  { "name": "regexGlobalReplace", "value": "regexGlobalReplace()", "packageName": "DS.Regex"},
  { "name": "encode", "value": "encode()", "packageName": "DS.URL"},
  { "name": "decode", "value": "decode()", "packageName": "DS.URL"},







  { "name": "abs", "value": "abs(num)", "packageName": "DW.Core"},
  { "name": "avg", "value": "avg(arr)", "packageName": "DW.Core"},
  { "name": "ceil", "value": "ceil(num)", "packageName": "DW.Core"},
  { "name": "contains", "value": "contains(arr, any)", "packageName": "DW.Core"},
  { "name": "daysBetween", "value": "daysBetween(date1, date2)", "packageName": "DW.Core"},
  { "name": "distinctBy", "value": "distinictBy(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "endsWith", "value": "endsWith(str, sub)", "packageName": "DW.Core"},
  { "name": "entiresOf", "value": "entriesOf(obj)", "packageName": "DW.Core"},
  { "name": "filter", "value": "filter(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "filterObject", "value": "filterObject(obj, function(value,key,index))", "packageName": "DW.Core"},
  { "name": "find", "value": "find(arr, any)", "packageName": "DW.Core"},
  { "name": "flatMap", "value": "flatMap(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "flatten", "value": "flatten(arr)", "packageName": "DW.Core"},
  { "name": "floor", "value": "floor(num)", "packageName": "DW.Core"},
  { "name": "groupBy", "value": "groupBy(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "isBlank", "value": "isBlank(str)", "packageName": "DW.Core"},
  { "name": "isDecimal", "value": "isDecimal(num)", "packageName": "DW.Core"},
  { "name": "isEmpty", "value": "isEmpty(any)", "packageName": "DW.Core"},
  { "name": "isEven", "value": "isEven(num)", "packageName": "DW.Core"},
  { "name": "isInteger", "value": "isInteger(num)", "packageName": "DW.Core"},
  { "name": "isLeapYear", "value": "isLeapYear(date)", "packageName": "DW.Core"},
  { "name": "isOdd", "value": "isOdd(num)", "packageName": "DW.Core"},
  { "name": "joinBy", "value": "joinBy(arr, str)", "packageName": "DW.Core"},
  { "name": "keysOf", "value": "keysOf(obj)", "packageName": "DW.Core"},
  { "name": "log", "value": "log(str)", "packageName": "DW.Core"},
  { "name": "lower", "value": "lower(str)", "packageName": "DW.Core"},
  { "name": "map", "value": "map(array, function(item,index))", "packageName": "DW.Core"},
  { "name": "mapObject", "value": "mapObject(obj, function(value,key,index))", "packageName": "DW.Core"},
  { "name": "match", "value": "match(str, regex)", "packageName": "DW.Core"},
  { "name": "matches", "value": "matches(str, regex)", "packageName": "DW.Core"},
  { "name": "max", "value": "max(array)", "packageName": "DW.Core"},
  { "name": "maxBy", "value": "maxBy(array, function(item))", "packageName": "DW.Core"},
  { "name": "min", "value": "min(array)", "packageName": "DW.Core"},
  { "name": "minBy", "value": "minBy(array, function(item))", "packageName": "DW.Core"},
  { "name": "mod", "value": "mod(num1,num2)", "packageName": "DW.Core"},
  { "name": "namesOf", "value": "namesOf(obj)", "packageName": "DW.Core"},
  { "name": "native", "value": "native(str)", "packageName": "DW.Core"},
  { "name": "now", "value": "now()", "packageName": "DW.Core"},
  { "name": "orderBy", "value": "orderBy(obj, function(value,key))", "packageName": "DW.Core"},
  { "name": "pluck", "value": "pluck(obj, function(value,key,index))", "packageName": "DW.Core"},
  { "name": "pow", "value": "pow(num1,num2)", "packageName": "DW.Core"},
  { "name": "random", "value": "random", "packageName": "DW.Core"},
  { "name": "randomInt", "value": "randomInt(num)", "packageName": "DW.Core"},
  { "name": "read", "value": "read(str)", "packageName": "DW.Core"},
  { "name": "readUrl", "value": "readUrl(str)", "packageName": "DW.Core"},
  { "name": "reduce", "value": "reduce(arr, function(item,acc))", "packageName": "DW.Core"},
  { "name": "replace", "value": "replace(str1, regex, replace)", "packageName": "DW.Core"},
  { "name": "round", "value": "round(num)", "packageName": "DW.Core"},
  { "name": "scan", "value": "scan(str, regex)", "packageName": "DW.Core"},
  { "name": "sizeOf", "value": "sizeOf(any)", "packageName": "DW.Core"},
  { "name": "splitBy", "value": "splitBy(str, regex)", "packageName": "DW.Core"},
  { "name": "sqrt", "value": "sqrt(num)", "packageName": "DW.Core"},
  { "name": "startsWith", "value": "startsWith(str, sub)", "packageName": "DW.Core"},
  { "name": "sum", "value": "sum(arr)", "packageName": "DW.Core"},
  { "name": "to", "value": "to(num1, num2)", "packageName": "DW.Core"},
  { "name": "trim", "value": "trim(str)", "packageName": "DW.Core"},
  { "name": "typeOf", "value": "typeOf(any)", "packageName": "DW.Core"},
  { "name": "unzip", "value": "unzip(array)", "packageName": "DW.Core"},
  { "name": "upper", "value": "upper(str)", "packageName": "DW.Core"},
  { "name": "uuid", "value": "uuid", "packageName": "DW.Core"},
  { "name": "valuesOf", "value": "valuesOf(obj)", "packageName": "DW.Core"},
  { "name": "zip", "value": "zip(arr,arr)", "packageName": "DW.Core"}
]