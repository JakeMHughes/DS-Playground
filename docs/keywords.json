[
  { "name": "append", "value": "append(array, value)", "packageName": "ds"},
  { "name": "combine", "value": "combine(first, second)", "packageName": "ds"},
  { "name": "contains", "value": "contains(container, any)", "packageName": "ds"},
  { "name": "distinctBy", "value": "distinctBy(container, funct)", "packageName": "ds"},
  { "name": "endsWith", "value": "endsWith(str, sub)", "packageName": "ds"},
  { "name": "entriesOf", "value": "entriesOf(obj)", "packageName": "ds"},
  { "name": "filter", "value": "filter(array, function(item,index))", "packageName": "ds"},
  { "name": "filterObject", "value": "filterObject(obj, function(value,key,index))", "packageName": "ds"},
  { "name": "find", "value": "find(container, any)", "packageName": "ds"},
  { "name": "flatMap", "value": "flatMap(arr, function(item,index))", "packageName": "ds"},
  { "name": "flatten", "value": "flatten(arr)", "packageName": "ds"},
  { "name": "foldLeft", "value": "foldLeft(arr, function(curr,prev), init)", "packageName": "ds"},
  { "name": "foldRight", "value": "foldRight(arr, function(curr,prev), init)", "packageName": "ds"},
  { "name": "groupBy", "value": "groupBy(container, funct)", "packageName": "ds"},
  { "name": "isArray", "value": "isArray(any)", "packageName": "ds"},
  { "name": "isBlank", "value": "isBlank(str)", "packageName": "ds"},
  { "name": "isBoolean", "value": "isBoolean(any)", "packageName": "ds"},
  { "name": "isDecimal", "value": "isDecimal(num)", "packageName": "ds"},
  { "name": "isEmpty", "value": "isEmpty(any)", "packageName": "ds"},
  { "name": "isEven", "value": "isEven(num)", "packageName": "ds"},
  { "name": "isFunction", "value": "isFunction(any)", "packageName": "ds"},
  { "name": "isInteger", "value": "isInteger(num)", "packageName": "ds"},
  { "name": "isNumber", "value": "isNumber(any)", "packageName": "ds"},
  { "name": "isObject", "value": "isObject(any)", "packageName": "ds"},
  { "name": "isOdd", "value": "isOdd(num)", "packageName": "ds"},
  { "name": "isString", "value": "isString(any)", "packageName": "ds"},
  { "name": "joinBy", "value": "joinBy(arr, str)", "packageName": "ds"},
  { "name": "keysOf", "value": "keysOf(obj)", "packageName": "ds"},
  { "name": "lower", "value": "lower(str)", "packageName": "ds"},
  { "name": "map", "value": "map(array, function(item,index))", "packageName": "ds"},
  { "name": "mapEntries", "value": "mapEntries(obj, function(value,key,index))", "packageName": "ds"},
  { "name": "mapObject", "value": "mapObject(obj, function(value,key,index))", "packageName": "ds"},
  { "name": "match", "value": "match(str, regex)", "packageName": "ds"},
  { "name": "matches", "value": "matches(str, regex)", "packageName": "ds"},
  { "name": "max", "value": "max(array)", "packageName": "ds"},
  { "name": "maxBy", "value": "maxBy(array, function(item))", "packageName": "ds"},
  { "name": "min", "value": "min(array)", "packageName": "ds"},
  { "name": "minBy", "value": "minBy(array, function(item))", "packageName": "ds"},
  { "name": "orderBy", "value": "orderBy(container, function(value,key))", "packageName": "ds"},
  { "name": "parseDouble", "value": "parseDouble(str)", "packageName": "ds"},
  { "name": "parseHex", "value": "parseHex(str)", "packageName": "ds"},
  { "name": "parseInt", "value": "parseInt(str)", "packageName": "ds"},
  { "name": "parseOctal", "value": "parseOctal(str)", "packageName": "ds"},
  { "name": "prepend", "value": "prepend(array, value)", "packageName": "ds"},
  { "name": "range", "value": "range(begin, end)", "packageName": "ds"},
  { "name": "read", "value": "read(data, mimeType,params)", "packageName": "ds"},
  { "name": "readUrl", "value": "readUrl(url)", "packageName": "ds"},
  { "name": "remove", "value": "remove(container, value)", "packageName": "ds"},
  { "name": "removeMatch", "value": "removeMatch(container, value)", "packageName": "ds"},
  { "name": "replace", "value": "replace(str, regex, replace)", "packageName": "ds"},
  { "name": "reverse", "value": "reverse(container)", "packageName": "ds"},
  { "name": "scan", "value": "scan(str, regex)", "packageName": "ds"},
  { "name": "sizeOf", "value": "sizeOf(any)", "packageName": "ds"},
  { "name": "splitBy", "value": "splitBy(str, regex)", "packageName": "ds"},
  { "name": "startsWith", "value": "startsWith(str, sub)", "packageName": "ds"},
  { "name": "trim", "value": "trim(str)", "packageName": "ds"},
  { "name": "typeOf", "value": "typeOf(any)", "packageName": "ds"},
  { "name": "unzip", "value": "unzip(array)", "packageName": "ds"},
  { "name": "upper", "value": "upper(str)", "packageName": "ds"},
  { "name": "uuid", "value": "uuid", "packageName": "ds"},
  { "name": "valuesOf", "value": "valuesOf(obj)", "packageName": "ds"},
  { "name": "write", "value": "write(data, mimeType, params)", "packageName": "ds"},
  { "name": "zip", "value": "zip(arr1,arr2)", "packageName": "ds"},

  { "name": "hash", "value": "hash(value, alg)", "packageName": "ds.crypto"},
  { "name": "hmac", "value": "hmac(value, secret, alg)", "packageName": "ds.crypto"},

  { "name": "select", "value": "select(json,path)", "packageName": "ds.jsonpath"},

  { "name": "regexFullMatch", "value": "regexFullMatch(regex, str)", "packageName": "ds.regex"},
  { "name": "regexGlobalReplace", "value": "regexGlobalReplace(str, pattern, replace)", "packageName": "ds.regex"},
  { "name": "regexPartialMatch", "value": "regexPartialMatch(regex, str)", "packageName": "ds.regex"},
  { "name": "regexQuoteMeta", "value": "regexQuoteMeta(str)", "packageName": "ds.regex"},
  { "name": "regexReplace", "value": "regexReplace(str, pattern, replace)", "packageName": "ds.regex"},
  { "name": "regexScan", "value": "regexScan(regex, str)", "packageName": "ds.regex"},

  { "name": "decode", "value": "decode(data, encoding)", "packageName": "ds.url"},
  { "name": "encode", "value": "encode(data, encoding)", "packageName": "ds.url"},

  { "name": "abs", "value": "abs(num)", "packageName": "ds.math"},
  { "name": "acos", "value": "acos(num)", "packageName": "ds.math"},
  { "name": "asin", "value": "asin(num)", "packageName": "ds.math"},
  { "name": "atan", "value": "atan(num)", "packageName": "ds.math"},
  { "name": "avg", "value": "avg(arr)", "packageName": "ds.math"},
  { "name": "ceil", "value": "ceil(num)", "packageName": "ds.math"},
  { "name": "clamp", "value": "clamp(x, min, max)", "packageName": "ds.math"},
  { "name": "cos", "value": "cos(num)", "packageName": "ds.math"},
  { "name": "exp", "value": "exp(num)", "packageName": "ds.math"},
  { "name": "exponent", "value": "exponent(num)", "packageName": "ds.math"},
  { "name": "floor", "value": "floor(num)", "packageName": "ds.math"},
  { "name": "log", "value": "log(num)", "packageName": "ds.math"},
  { "name": "mantissa", "value": "mantissa(num)", "packageName": "ds.math"},
  { "name": "mod", "value": "mod(num1,num2)", "packageName": "ds.math"},
  { "name": "pow", "value": "pow(num1,num2)", "packageName": "ds.math"},
  { "name": "random", "value": "random", "packageName": "ds.math"},
  { "name": "randomInt", "value": "randomInt(num)", "packageName": "ds.math"},
  { "name": "round", "value": "round(num)", "packageName": "ds.math"},
  { "name": "sin", "value": "sin(num)", "packageName": "ds.math"},
  { "name": "sqrt", "value": "sqrt(num)", "packageName": "ds.math"},
  { "name": "sum", "value": "sum(arr)", "packageName": "ds.math"},
  { "name": "tan", "value": "tan(num)", "packageName": "ds.math"},

  { "name": "countBy", "value": "countBy(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "divideBy", "value": "divideBy(arr,size)", "packageName": "ds.arrays"},
  { "name": "drop", "value": "drop(arr,num)", "packageName": "ds.arrays"},
  { "name": "dropWhile", "value": "dropWhile(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "every", "value": "every(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "firstWith", "value": "firstWith(arr,function(item,index))", "packageName": "ds.arrays"},
  { "name": "indexOf", "value": "indexOf(arr,value)", "packageName": "ds.arrays"},
  { "name": "indexWhere", "value": "indexWhere(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "join", "value": "join(arrL,arrR,functL,functR)", "packageName": "ds.arrays"},
  { "name": "leftJoin", "value": "leftJoin(arrL,arrR,functL,functR)", "packageName": "ds.arrays"},
  { "name": "outerJoin", "value": "outerJoin(arrL,arrR,functL,functR)", "packageName": "ds.arrays"},
  { "name": "partition", "value": "partition(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "slice", "value": "slice(arr,start,end)", "packageName": "ds.arrays"},
  { "name": "some", "value": "some(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "splitAt", "value": "splitAt(arr,index)", "packageName": "ds.arrays"},
  { "name": "splitWhere", "value": "splitWhere(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "sumBy", "value": "sumBy(arr,function(item))", "packageName": "ds.arrays"},
  { "name": "take", "value": "take(arr,index)", "packageName": "ds.arrays"},
  { "name": "takeWhile", "value": "takeWhile(arr,function(item))", "packageName": "ds.arrays"},

  { "name": "fromBase64", "value": "fromBase64(value)", "packageName": "ds.binaries"},
  { "name": "fromHex", "value": "fromHex(value)", "packageName": "ds.binaries"},
  { "name": "readLinesWith", "value": "readLinesWith(value,encoding)", "packageName": "ds.binaries"},
  { "name": "toBase64", "value": "toBase64(value)", "packageName": "ds.binaries"},
  { "name": "toHex", "value": "toHex(value)", "packageName": "ds.binaries"},
  { "name": "writeLinesWith", "value": "writeLinesWith(value,encoding)", "packageName": "ds.binaries"},

  { "name": "fromBinary", "value": "fromBinary(value)", "packageName": "ds.numbers"},
  { "name": "fromHex", "value": "fromHex(value)", "packageName": "ds.numbers"},
  { "name": "fromRadixNumber", "value": "fromRadixNumber(value,num)", "packageName": "ds.numbers"},
  { "name": "toBinary", "value": "toBinary(value)", "packageName": "ds.numbers"},
  { "name": "toHex", "value": "toHex(value)", "packageName": "ds.numbers"},
  { "name": "toRadixNumber", "value": "toRadixNumber(value, num)", "packageName": "ds.numbers"},

  { "name": "divideBy", "value": "divideBy(obj,num)", "packageName": "ds.objects"},
  { "name": "everyEntry", "value": "everyEntry(value,function(value,key))", "packageName": "ds.objects"},
  { "name": "mergeWith", "value": "mergeWith(valueOne,valueTwo)", "packageName": "ds.objects"},
  { "name": "someEntry", "value": "someEntry(value,function(value,key))", "packageName": "ds.objects"},
  { "name": "takeWhile", "value": "takeWhile(obj,function(value,key))", "packageName": "ds.objects"},

  { "name": "appendIfMissing", "value": "appendIfMissing(str1,str2)", "packageName": "ds.strings"},
  { "name": "camelize", "value": "camelize(str)", "packageName": "ds.strings"},
  { "name": "capitalize", "value": "capitalize(str)", "packageName": "ds.strings"},
  { "name": "charCode", "value": "charCode(str)", "packageName": "ds.strings"},
  { "name": "charCodeAt", "value": "charCodeAt(str,num)", "packageName": "ds.strings"},
  { "name": "dasherize", "value": "dasherize(str)", "packageName": "ds.strings"},
  { "name": "fromCharCode", "value": "fromCharCode(num)", "packageName": "ds.strings"},
  { "name": "isAlpha", "value": "isAlpha(str)", "packageName": "ds.strings"},
  { "name": "isAlphanumeric", "value": "isAlphanumeric(str)", "packageName": "ds.strings"},
  { "name": "isLowerCase", "value": "isLowerCase(str)", "packageName": "ds.strings"},
  { "name": "isNumeric", "value": "isNumeric(str)", "packageName": "ds.strings"},
  { "name": "isUpperCase", "value": "isUpperCase(str)", "packageName": "ds.strings"},
  { "name": "isWhitespace", "value": "isWhitespace(str)", "packageName": "ds.strings"},
  { "name": "leftPad", "value": "leftPad(str,offset)", "packageName": "ds.strings"},
  { "name": "ordinalize", "value": "ordinalize(num)", "packageName": "ds.strings"},
  { "name": "pluralize", "value": "pluralize(value)", "packageName": "ds.strings"},
  { "name": "prependIfMissing", "value": "prependIfMissing(str1,str2)", "packageName": "ds.strings"},
  { "name": "repeat", "value": "repeat(str,num)", "packageName": "ds.strings"},
  { "name": "rightPad", "value": "rightPad(str,offset)", "packageName": "ds.strings"},
  { "name": "singularize", "value": "singularize(value)", "packageName": "ds.strings"},
  { "name": "substringAfter", "value": "substringAfter(value, sep)", "packageName": "ds.strings"},
  { "name": "substringAfterLast", "value": "substringAfterLast(value, sep)", "packageName": "ds.strings"},
  { "name": "substringBefore", "value": "substringBefore(value, sep)", "packageName": "ds.strings"},
  { "name": "substringBeforeLast", "value": "substringBeforeLast(str, sep)", "packageName": "ds.strings"},
  { "name": "underscore", "value": "underscore(str)", "packageName": "ds.strings"},
  { "name": "unwrap", "value": "unwrap(str,wrapper)", "packageName": "ds.strings"},
  { "name": "withMaxSize", "value": "withMaxSize(str,num)", "packageName": "ds.strings"},
  { "name": "wrapIfMissing", "value": "wrapIfMissing(str,wrapper)", "packageName": "ds.strings"},
  { "name": "wrapWith", "value": "wrapWith(str,wrapper)", "packageName": "ds.strings"},

  { "name": "changeTimeZone", "value": "changeTimeZone(datetime,inputFormat,timezone)", "packageName": "ds.datetime"},
  { "name": "compare", "value": "compare(datetime1,format1, datetime2, format2)", "packageName": "ds.datetime"},
  { "name": "daysBetween", "value": "daysBetween(datetime1,datetime2)", "packageName": "ds.datetime"},
  { "name": "now", "value": "now()", "packageName": "ds.datetime"},
  { "name": "format", "value": "format(datetime,inputFormat,outputFormat)", "packageName": "ds.datetime"},
  { "name": "isLeapYear", "value": "isLeapYear(datetime)", "packageName": "ds.datetime"},
  { "name": "toLocalDate", "value": "toLocalDate(datetime,format)", "packageName": "ds.datetime"},
  { "name": "toLocalDateTime", "value": "toLocalDateTime(datetime,format)", "packageName": "ds.datetime"},
  { "name": "toLocalTime", "value": "toLocalTime(datetime,format)", "packageName": "ds.datetime"},

  { "name": "compare", "value": "compare(datetime1,format1, datetime2, format2)", "packageName": "ds.localdatetime"},
  { "name": "format", "value": "format(datetime,inputFormat,outputFormat)", "packageName": "ds.localdatetime"},
  { "name": "now", "value": "now()", "packageName": "ds.localdatetime"},
  { "name": "offset", "value": "offset(datetime,period)", "packageName": "ds.localdatetime"}
]