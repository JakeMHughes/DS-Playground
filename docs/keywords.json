[
  { "name": "extVar", "value": "extVar()", "packageName": "std"},
  { "name": "thisFile", "value": "thisFile()", "packageName": "std"},
  { "name": "type", "value": "type()", "packageName": "std"},
  { "name": "length", "value": "length()", "packageName": "std"},
  { "name": "objectHas", "value": "objectHas()", "packageName": "std"},
  { "name": "objectFields", "value": "objectFields()", "packageName": "std"},
  { "name": "objectHasAll", "value": "objectHasAll()", "packageName": "std"},
  { "name": "objectFieldsAll", "value": "objectFieldsAll()", "packageName": "std"},
  { "name": "prune", "value": "prune()", "packageName": "std"},
  { "name": "mapWithKey", "value": "mapWithKey()", "packageName": "std"},
  { "name": "abs", "value": "abs()", "packageName": "std"},
  { "name": "sign", "value": "sign()", "packageName": "std"},
  { "name": "max", "value": "max()", "packageName": "std"},
  { "name": "min", "value": "min()", "packageName": "std"},
  { "name": "pow", "value": "pow()", "packageName": "std"},
  { "name": "exp", "value": "exp()", "packageName": "std"},
  { "name": "log", "value": "log()", "packageName": "std"},
  { "name": "exponent", "value": "exponent()", "packageName": "std"},
  { "name": "mantissa", "value": "mantissa()", "packageName": "std"},
  { "name": "floor", "value": "floor()", "packageName": "std"},
  { "name": "ceil", "value": "ceil()", "packageName": "std"},
  { "name": "sqrt", "value": "sqrt()", "packageName": "std"},
  { "name": "sin", "value": "sin()", "packageName": "std"},
  { "name": "cos", "value": "cos()", "packageName": "std"},
  { "name": "tan", "value": "tan()", "packageName": "std"},
  { "name": "asin", "value": "asin()", "packageName": "std"},
  { "name": "acos", "value": "acos()", "packageName": "std"},
  { "name": "atan", "value": "atan()", "packageName": "std"},
  { "name": "assertEquals", "value": "assertEquals()", "packageName": "std"},
  { "name": "toString", "value": "toString()", "packageName": "std"},
  { "name": "codepoint", "value": "codepoint()", "packageName": "std"},
  { "name": "char", "value": "char()", "packageName": "std"},
  { "name": "substr", "value": "substr()", "packageName": "std"},
  { "name": "findsubstr", "value": "findsubstr()", "packageName": "std"},
  { "name": "startsWith", "value": "startsWith()", "packageName": "std"},
  { "name": "endsWith", "value": "endsWith()", "packageName": "std"},
  { "name": "split", "value": "split()", "packageName": "std"},
  { "name": "splitLimit", "value": "splitLimit()", "packageName": "std"},
  { "name": "strReplace", "value": "strReplace()", "packageName": "std"},
  { "name": "asciiUpper", "value": "asciiUpper()", "packageName": "std"},
  { "name": "asciiLower", "value": "asciiLower()", "packageName": "std"},
  { "name": "stringChars", "value": "stringChars()", "packageName": "std"},
  { "name": "format", "value": "format()", "packageName": "std"},
  { "name": "escapeStringBash", "value": "escapeStringBash()", "packageName": "std"},
  { "name": "escapeStringDollars", "value": "escapeStringDollars()", "packageName": "std"},
  { "name": "escapeStringJson", "value": "escapeStringJson()", "packageName": "std"},
  { "name": "parseInt", "value": "parseInt()", "packageName": "std"},
  { "name": "parseOctal", "value": "parseOctal()", "packageName": "std"},
  { "name": "parseHex", "value": "ParseHex()", "packageName": "std"},
  { "name": "parseJson", "value": "parseJson()", "packageName": "std"},
  { "name": "minfestIni", "value": "manifestIni()", "packageName": "std"},
  { "name": "minfestPython", "value": "manifestPython()", "packageName": "std"},
  { "name": "minfestPythonVars", "value": "manifestPythonVars()", "packageName": "std"},
  { "name": "minfestJsonEx", "value": "manifestJsonEx()", "packageName": "std"},
  { "name": "minfestYamlDoc", "value": "manifestYamlDoc()", "packageName": "std"},
  { "name": "minfestYamlStream", "value": "manifestYamlStream()", "packageName": "std"},
  { "name": "minfestXmlJsonml", "value": "manifestXmlJsonml()", "packageName": "std"},
  { "name": "makeArray", "value": "makeArray()", "packageName": "std"},
  { "name": "member", "value": "member()", "packageName": "std"},
  { "name": "count", "value": "count()", "packageName": "std"},
  { "name": "find", "value": "find()", "packageName": "std"},
  { "name": "map", "value": "map()", "packageName": "std"},
  { "name": "mapWithIndex", "value": "mapWithIndex()", "packageName": "std"},
  { "name": "filterMap", "value": "filterMap()", "packageName": "std"},
  { "name": "flatMap", "value": "flatMap()", "packageName": "std"},
  { "name": "filter", "value": "filter()", "packageName": "std"},
  { "name": "foldl", "value": "foldl()", "packageName": "std"},
  { "name": "foldr", "value": "foldr()", "packageName": "std"},
  { "name": "range", "value": "range()", "packageName": "std"},
  { "name": "repeat", "value": "repeat()", "packageName": "std"},
  { "name": "join", "value": "join()", "packageName": "std"},
  { "name": "lines", "value": "lines()", "packageName": "std"},
  { "name": "flattenArrays", "value": "flattenArrays()", "packageName": "std"},
  { "name": "reverse", "value": "reverse()", "packageName": "std"},
  { "name": "sort", "value": "sort()", "packageName": "std"},
  { "name": "uniq", "value": "uniq()", "packageName": "std"},
  { "name": "set", "value": "set()", "packageName": "std"},
  { "name": "setInter", "value": "setInter()", "packageName": "std"},
  { "name": "setUnion", "value": "setUnion()", "packageName": "std"},
  { "name": "setDiff", "value": "setDiff()", "packageName": "std"},
  { "name": "setMember", "value": "setMember()", "packageName": "std"},
  { "name": "base64", "value": "base64()", "packageName": "std"},
  { "name": "bade64DecodeBytes", "value": "bade64DecodeBytes()", "packageName": "std"},
  { "name": "bade64Decode", "value": "bade64Decode()", "packageName": "std"},
  { "name": "md5", "value": "md5()", "packageName": "std"},
  { "name": "mergePatch", "value": "mergePatch()", "packageName": "std"},
  { "name": "trace", "value": "trace()", "packageName": "std"},






















  { "name": "hash", "value": "hash()", "packageName": "DS.Crypto"},
  { "name": "hmac", "value": "hmac()", "packageName": "DS.Crypto"},
  { "name": "encrypt", "value": "encrypt()", "packageName": "DS.Crypto"},
  { "name": "decrypt", "value": "decrypt()", "packageName": "DS.Crypto"},
  { "name": "now", "value": "now()", "packageName": "DS.ZonedDateTime"},
  { "name": "offset", "value": "offset()", "packageName": "DS.ZonedDateTime"},
  { "name": "format", "value": "format()", "packageName": "DS.ZonedDateTime"},
  { "name": "compare", "value": "compare()", "packageName": "DS.ZonedDateTime"},
  { "name": "changeTimeZone", "value": "changeTimeZone()", "packageName": "DS.ZonedDateTime"},
  { "name": "toLocalDate", "value": "toLocalDate()", "packageName": "DS.ZonedDateTime"},
  { "name": "toLocalTime", "value": "toLocalTime()", "packageName": "DS.ZonedDateTime"},
  { "name": "now", "value": "now()", "packageName": "DS.LocalDateTime"},
  { "name": "offset", "value": "offset()", "packageName": "DS.LocalDateTime"},
  { "name": "format", "value": "format()", "packageName": "DS.LocalDateTime"},
  { "name": "compare", "value": "compare()", "packageName": "DS.LocalDateTime"},
  { "name": "select", "value": "select()", "packageName": "DS.JsonPath"},
  { "name": "select", "value": "select()", "packageName": "DS.Util"},
  { "name": "filterEx", "value": "filterEx()", "packageName": "DS.Util"},
  { "name": "groupBy", "value": "groupBy()", "packageName": "DS.Util"},
  { "name": "remove", "value": "remove()", "packageName": "DS.Util"},
  { "name": "removeAll", "value": "removeAll()", "packageName": "DS.Util"},
  { "name": "deepFlattenArrays", "value": "deepFlattenArrays()", "packageName": "DS.Util"},
  { "name": "reverse", "value": "reverse()", "packageName": "DS.Util"},
  { "name": "parseDouble", "value": "parseDouble()", "packageName": "DS.Util"},
  { "name": "duplicates", "value": "duplicates()", "packageName": "DS.Util"},
  { "name": "sum", "value": "sum()", "packageName": "DS.Util"},
  { "name": "round", "value": "round()", "packageName": "DS.Util"},
  { "name": "counts", "value": "counts()", "packageName": "DS.Util"},
  { "name": "mapToObject", "value": "mapToObject()", "packageName": "DS.Util"},
  { "name": "regexFullMatch", "value": "regexFullMatch()", "packageName": "DS.Regex"},
  { "name": "regexPartialMatch", "value": "regexPartialMatch()", "packageName": "DS.Regex"},
  { "name": "regexScan", "value": "regexScan()", "packageName": "DS.Regex"},
  { "name": "regexQuoteMeta", "value": "regexQuoteMeta()", "packageName": "DS.Regex"},
  { "name": "regexReplace", "value": "regexReplace()", "packageName": "DS.Regex"},
  { "name": "regexGlobalReplace", "value": "regexGlobalReplace()", "packageName": "DS.Regex"},
  { "name": "encode", "value": "encode()", "packageName": "DS.URL"},
  { "name": "decode", "value": "decode()", "packageName": "DS.URL"},







  { "name": "abs", "value": "abs(num)", "packageName": "DW.Core"},
  { "name": "avg", "value": "avg(arr)", "packageName": "DW.Core"},
  { "name": "ceil", "value": "ceil(num)", "packageName": "DW.Core"},
  { "name": "contains", "value": "contains(arr, any)", "packageName": "DW.Core"},
  { "name": "daysBetween", "value": "daysBetween(date1, date2)", "packageName": "DW.Core"},
  { "name": "distinctBy", "value": "distinictBy(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "endsWith", "value": "endsWith(str, sub)", "packageName": "DW.Core"},
  { "name": "entiresOf", "value": "entriesOf(obj)", "packageName": "DW.Core"},
  { "name": "filter", "value": "filter(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "filterObject", "value": "filterObject(obj, function(value,key,index))", "packageName": "DW.Core"},
  { "name": "find", "value": "find(arr, any)", "packageName": "DW.Core"},
  { "name": "flatMap", "value": "flatMap(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "flatten", "value": "flatten(arr)", "packageName": "DW.Core"},
  { "name": "floor", "value": "floor(num)", "packageName": "DW.Core"},
  { "name": "groupBy", "value": "groupBy(arr, function(item,index))", "packageName": "DW.Core"},
  { "name": "isBlank", "value": "isBlank(str)", "packageName": "DW.Core"},
  { "name": "isDecimal", "value": "isDecimal(num)", "packageName": "DW.Core"},
  { "name": "isEmpty", "value": "isEmpty(any)", "packageName": "DW.Core"},
  { "name": "isEven", "value": "isEven(num)", "packageName": "DW.Core"},
  { "name": "isInteger", "value": "isInteger(num)", "packageName": "DW.Core"},
  { "name": "isLeapYear", "value": "isLeapYear(date)", "packageName": "DW.Core"},
  { "name": "isOdd", "value": "isOdd(num)", "packageName": "DW.Core"},
  { "name": "joinBy", "value": "joinBy(arr, str)", "packageName": "DW.Core"},
  { "name": "keysOf", "value": "keysOf(obj)", "packageName": "DW.Core"},
  { "name": "log", "value": "log(str)", "packageName": "DW.Core"},
  { "name": "lower", "value": "lower(str)", "packageName": "DW.Core"},
  { "name": "map", "value": "map(array, function(item,index))", "packageName": "DW.Core"},
  { "name": "mapObject", "value": "mapObject(obj, function(value,key,index))", "packageName": "DW.Core"},
  { "name": "match", "value": "match(str, regex)", "packageName": "DW.Core"},
  { "name": "matches", "value": "matches(str, regex)", "packageName": "DW.Core"},
  { "name": "max", "value": "max(array)", "packageName": "DW.Core"},
  { "name": "maxBy", "value": "maxBy(array, function(item))", "packageName": "DW.Core"},
  { "name": "min", "value": "min(array)", "packageName": "DW.Core"},
  { "name": "minBy", "value": "minBy(array, function(item))", "packageName": "DW.Core"},
  { "name": "mod", "value": "mod(num1,num2)", "packageName": "DW.Core"},
  { "name": "namesOf", "value": "namesOf(obj)", "packageName": "DW.Core"},
  { "name": "native", "value": "native(str)", "packageName": "DW.Core"},
  { "name": "now", "value": "now()", "packageName": "DW.Core"},
  { "name": "orderBy", "value": "orderBy(obj, function(value,key))", "packageName": "DW.Core"},
  { "name": "pluck", "value": "pluck(obj, function(value,key,index))", "packageName": "DW.Core"},
  { "name": "pow", "value": "pow(num1,num2)", "packageName": "DW.Core"},
  { "name": "random", "value": "random", "packageName": "DW.Core"},
  { "name": "randomInt", "value": "randomInt(num)", "packageName": "DW.Core"},
  { "name": "read", "value": "read(str)", "packageName": "DW.Core"},
  { "name": "readUrl", "value": "readUrl(str)", "packageName": "DW.Core"},
  { "name": "reduce", "value": "reduce(arr, function(item,acc))", "packageName": "DW.Core"},
  { "name": "replace", "value": "replace(str1, regex, replace)", "packageName": "DW.Core"},
  { "name": "round", "value": "round(num)", "packageName": "DW.Core"},
  { "name": "scan", "value": "scan(str, regex)", "packageName": "DW.Core"},
  { "name": "sizeOf", "value": "sizeOf(any)", "packageName": "DW.Core"},
  { "name": "splitBy", "value": "splitBy(str, regex)", "packageName": "DW.Core"},
  { "name": "sqrt", "value": "sqrt(num)", "packageName": "DW.Core"},
  { "name": "startsWith", "value": "startsWith(str, sub)", "packageName": "DW.Core"},
  { "name": "sum", "value": "sum(arr)", "packageName": "DW.Core"},
  { "name": "to", "value": "to(num1, num2)", "packageName": "DW.Core"},
  { "name": "trim", "value": "trim(str)", "packageName": "DW.Core"},
  { "name": "typeOf", "value": "typeOf(any)", "packageName": "DW.Core"},
  { "name": "unzip", "value": "unzip(array)", "packageName": "DW.Core"},
  { "name": "upper", "value": "upper(str)", "packageName": "DW.Core"},
  { "name": "uuid", "value": "uuid", "packageName": "DW.Core"},
  { "name": "valuesOf", "value": "valuesOf(obj)", "packageName": "DW.Core"},
  { "name": "zip", "value": "zip(arr,arr)", "packageName": "DW.Core"},





  { "name": "countBy", "value": "countBy(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "divideBy", "value": "divideBy(arr,size)", "packageName": "DW.Arrays"},
  { "name": "drop", "value": "drop(arr,num)", "packageName": "DW.Arrays"},
  { "name": "dropWhile", "value": "dropWhile(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "every", "value": "every(value,function(item))", "packageName": "DW.Arrays"},
  { "name": "firstWith", "value": "firstWith(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "indexOf", "value": "indexOf(arr,value)", "packageName": "DW.Arrays"},
  { "name": "indexWhere", "value": "indexWhere(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "join", "value": "NOTIMPLEMENTED", "packageName": "DW.Arrays"},
  { "name": "leftJoin", "value": "NOTIMPLEMENTED", "packageName": "DW.Arrays"},
  { "name": "outerJoin", "value": "NOTIMPLEMENTED", "packageName": "DW.Arrays"},
  { "name": "partition", "value": "partition(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "slice", "value": "slice(arr,start,end)", "packageName": "DW.Arrays"},
  { "name": "some", "value": "some(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "splitAt", "value": "splitAt(arr,index)", "packageName": "DW.Arrays"},
  { "name": "splitWhere", "value": "splitWhere(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "sumBy", "value": "sumBy(arr,function(item))", "packageName": "DW.Arrays"},
  { "name": "take", "value": "take(arr,index)", "packageName": "DW.Arrays"},
  { "name": "takeWhile", "value": "takeWhile(arr,function(item))", "packageName": "DW.Arrays"},






  { "name": "fromBase64", "value": "fromBase64(value)", "packageName": "DW.Binaries"},
  { "name": "fromHex", "value": "fromHex(value)", "packageName": "DW.Binaries"},
  { "name": "readLinesWith", "value": "readLinesWith(value,encoding)", "packageName": "DW.Binaries"},
  { "name": "toBase64", "value": "toBase64(value)", "packageName": "DW.Binaries"},
  { "name": "toHex", "value": "toHex(value)", "packageName": "DW.Binaries"},
  { "name": "writeLinesWith", "value": "writeLinesWith(value,encoding)", "packageName": "DW.Binaries"},




  { "name": "fromBinary", "value": "fromBinary(value)", "packageName": "DW.Numbers"},
  { "name": "fromHex", "value": "fromHex(value)", "packageName": "DW.Numbers"},
  { "name": "fromRadixNumber", "value": "fromRadixNumber(value,num)", "packageName": "DW.Numbers"},
  { "name": "toBinary", "value": "toBinary(value)", "packageName": "DW.Numbers"},
  { "name": "toHex", "value": "toHex(value)", "packageName": "DW.Numbers"},
  { "name": "toRadixNumber", "value": "toRadixNumber(value, num)", "packageName": "DW.Numbers"},




  { "name": "divideBy", "value": "divideBy(obj,num)", "packageName": "DW.Objects"},
  { "name": "entrySet", "value": "entrySet(obj)", "packageName": "DW.Objects"},
  { "name": "everyEntry", "value": "everyEntry(value,function(value,key))", "packageName": "DW.Objects"},
  { "name": "keySet", "value": "keySet(obj)", "packageName": "DW.Objects"},
  { "name": "mergeWith", "value": "mergeWith(valueOne,valueTwo)", "packageName": "DW.Objects"},
  { "name": "nameSet", "value": "nameSet(obj)", "packageName": "DW.Objects"},
  { "name": "someEntry", "value": "someEntry(value,function(value,key))", "packageName": "DW.Objects"},
  { "name": "takeWhile", "value": "takeWhile(obj,function(value,key))", "packageName": "DW.Objects"},
  { "name": "valueSet", "value": "valueSet(value)", "packageName": "DW.Objects"},




  { "name": "appendIfMissing", "value": "appendIfMissing(str1,str2)", "packageName": "DW.Strings"},
  { "name": "camelize", "value": "camelize(str)", "packageName": "DW.Strings"},
  { "name": "capitalize", "value": "capitalize(str)", "packageName": "DW.Strings"},
  { "name": "charCose", "value": "charCode(str)", "packageName": "DW.Strings"},
  { "name": "charCodeAt", "value": "charCodeAt(str,num)", "packageName": "DW.Strings"},
  { "name": "dasherize", "value": "dasherize(str)", "packageName": "DW.Strings"},
  { "name": "fromCharCode", "value": "fromCharCode(num)", "packageName": "DW.Strings"},
  { "name": "isAlpha", "value": "isAlpha(str)", "packageName": "DW.Strings"},
  { "name": "isAlphanumeric", "value": "isAlphanumeric(str)", "packageName": "DW.Strings"},
  { "name": "isLowerCase", "value": "isLowerCase(str)", "packageName": "DW.Strings"},
  { "name": "isNumeric", "value": "isNumeric(str)", "packageName": "DW.Strings"},
  { "name": "isUpperCase", "value": "isUpperCase(str)", "packageName": "DW.Strings"},
  { "name": "isWhitespace", "value": "isWhitespace(str)", "packageName": "DW.Strings"},
  { "name": "leftPad", "value": "leftPad(str,offset)", "packageName": "DW.Strings"},
  { "name": "ordinalize", "value": "ordinalize(num)", "packageName": "DW.Strings"},
  { "name": "pluralize", "value": "pluralize(value)", "packageName": "DW.Strings"},
  { "name": "prependIfMissing", "value": "prependIfMissing(str1,str2)", "packageName": "DW.Strings"},
  { "name": "repeat", "value": "repeat(str,num)", "packageName": "DW.Strings"},
  { "name": "rightPad", "value": "rightPad(str,offset)", "packageName": "DW.Strings"},
  { "name": "singularize", "value": "singularize(value)", "packageName": "DW.Strings"},
  { "name": "substringAfter", "value": "substringAfter(value, sep)", "packageName": "DW.Strings"},
  { "name": "substringAfterLast", "value": "substringAfterLast(value, sep)", "packageName": "DW.Strings"},
  { "name": "substringBefore", "value": "substringBefore(value, sep)", "packageName": "DW.Strings"},
  { "name": "substringBeforeLast", "value": "substringBeforeLast(value, sep)", "packageName": "DW.Strings"},
  { "name": "underscore", "value": "underscore(str)", "packageName": "DW.Strings"},
  { "name": "unwrap", "value": "unwrap(value,wrapper)", "packageName": "DW.Strings"},
  { "name": "withMaxSize", "value": "withMaxSize(value,num)", "packageName": "DW.Strings"},
  { "name": "wrapIfMissing", "value": "wrapIfMissing(value,wrapper)", "packageName": "DW.Strings"},
  { "name": "wrapWith", "value": "wrapWith(value,wrapper)", "packageName": "DW.Strings"}






]